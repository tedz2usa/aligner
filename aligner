#!/usr/bin/env ruby

require 'awesome_print'
require 'fileutils'


def documentation

  <<END_DOCUMENTATION

                          ALIGNER SPECIFICATION

Usage:

  $ aligner filename

  Where filename is the path to a textfile containing tab-separated data
  to be aligned, or already aligned by aligner.

Effects:

  filename will be modified so that the data columns are aligned.
  It will also prepend '- ' and append ' -' to the first line headers.
  
  To align the text file, spaces are added after data until it fills the
  max width for the column, then adds another space, then the seperator 
  string, which is ' | '.


END_DOCUMENTATION

end



def main

  if ARGV.size > 0
    align_file(ARGV[0])
  else
    puts documentation
  end

end



def align_file(in_filename)

  temporary_filename = '__aligner_temp__'
  delimiter          = ' | '
  add_seperator      = ' '
  read_delimiter = delimiter

  max_widths = []

  # Get the max widths for the columns.

  read_file_by_line(in_filename) do |line, lineIndex|
    parts = line.split read_delimiter
    if parts.size == 1
      read_delimiter = "\t"
      parts = line.split read_delimiter
    end
    parts.each_with_index do |part, index|
      part.strip!
      headerize(part) if lineIndex == 0
      max_widths[index] ||= 0
      max_widths[index] = part.size if part.size > max_widths[index]
    end
  end

  # Write to temp file.

  read_file_by_line_and_write(in_filename, temporary_filename) do |line, out, lineIndex|

    parts = line.split read_delimiter

    new_line_string = ''

    parts.each_with_index do |part, index|
      part.strip!
      headerize(part) if lineIndex == 0
      difference = max_widths[index] - part.size
      new_line_string += part
      new_line_string += ' ' * difference + add_seperator + delimiter if index < parts.size-1
    end

    out.write(new_line_string + "\n")

  end

  # Replace original file with new contents.
  FileUtils.mv(temporary_filename, in_filename)

end


def headerize(part)
  if first_n(part, 2) == '- ' && last_n(part, 2) == ' -'
    # do nothing.
  else
    part.prepend('- ').concat(' -')  # add '- ' and ' -' to beginning and end respectively.
  end
end

def first_n(str, n)
  str[0,n] || str
end

def last_n(str, n)
  str[-n, str.size] || str
end 



def read_file_by_line_and_write(infile, outfile, mode='w')
  write_file(outfile, mode) do |out|
  read_file_by_line(infile) do |line, lineIndex|
    yield line, out, lineIndex
  end
  end
end

def read_file_by_line(filename)
  lineIndex = 0
  File.open(filename, 'r') do |file|
    file.each_line do |line|
      yield line, lineIndex
      lineIndex += 1
    end
  end
end

def write_file(filename, mode='w')
  File.open(filename, mode) do |out|
    yield out
  end
end


main

